head(mdrr)
head(mdrrDescr)
str(mdrrDescr)
data.frame(table(mdrrDescr$nR11))
nzv <- nearZeroVar(mdrrDescr, saveMetrics = T)
head(nzv)
nzv[nzv$nzv,][1:10]
nzv[nzv$nzv,][1:10,]
nzv[nzv$nzv==TRUE,][1:10,]
nzv[nzv$nzv,][1:10,]
nzv <- nearZeroVar(mdrrDescr)
head(nzv)
filteredDescr <- mdrrDescr[,-nzv]
highlyCor <- findCorrelation(cor(filteredDescr), cutoff = 0.75)
filteredDescr <- filteredDescr[,-highlyCor]
?seq
set.seed(96)
inTrain <- sample(seq(along = mdrrClass), length(mdrrClass)/2)
a <- seq(along = mdrrClass)
head(a)
dim(a)
length(a)
length(mdrrClass)
?sample
length(inTrain)
training <- filteredDescr[inTrain,]
test <- filteredDescr[-inTrain,]
trainMDRR <- mdrrClass[inTrain]
testMDRR <- mdrrClass[-inTrain]
preProcValues <- preProcess(training, method = c("center", "scale"))
trainTransformed <- predict(preProcValues, training)
testTransformed <- predict(preProcValues, test)
?preProcess
data("iris)
data("iris")
trainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE, times1)
trainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE, times=1)
head(trainIndex)
trainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE, times=3)
head(trainIndex)
trainIndex <- createFolds(iris$Species, p = 0.8, list = FALSE)
?createFolds
trainIndex <- createFolds(iris$Species, k=10, list = FALSE)
head(trainIndex)
length(iris$Species)
str(iris)
trainIndex
trainIndex <- createFolds(iris$Species, k=3, list = FALSE)
trainIndex
?update.train
data(iris)
TrainData <- iris[,1:4]
TrainClasses <- iris[,5]
knnFit1 <- train(TrainData, TrainClasses,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "cv"))
knnFit1
ggplot(knnFit1)
data <- read.csv(url(https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv))
data <- read.csv(url(https:\\d396qusza40orc.cloudfront.net\predmachlearn\pml-training.csv))
data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
?read.csv
head(data)
str(data)
test <- mdy_hms(data$cvtd_timestamp)
data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = c("NA","#DIV/0!"))
test <- as.Date(data$cvtd_timestamp)
head(test)
?mdy_hms
str(data)
data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = c("NA"))
str(data)
test <- as.Date(data$raw_timestamp_part_1)
heaD(test)
head(test)
test <- as.POSIXct(data$raw_timestamp_part_1)
test <- as.POSIXct.Date(data$raw_timestamp_part_1)
head(test)
test <- as.POSIXct.Date(paste0(data$raw_timestamp_part_1,data$raw_timestamp_part_2))
?as.POSIXct.Date
as.POSIXct.Date("5/12/2011  11:23:00")
as.POSIXct("5/12/2011  11:23:00")
as.POSIXct("5/12/2011  11:23:00", format = "%m/%d/%y %H:%M:%S")
as.POSIXct(strptime("5/12/2011  11:23:00", format = "%m/%d/%y %H:%M:%S"))
as.POSIXct("5/12/2011 11:23:00", format = "%m/%d/%y %H:%M:%S")
data2 <- na.omit(data)
str(data)
str(data2)
?na.omit
?na.omit
?apply
head(apply(data, 2, is.na))
head(sum(apply(data, 2, is.na)))
head(apply(data, 2, function(x) sum(is.na(x))))
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(is.na(x))/length(x))
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>0.5)
length(NAcols)
NAcols
NAcols[NAcols==TRUE]
NAcols[,NAcols==TRUE]
length(NAcols[NAcols==TRUE])
data2 <- data[,!NAcols]
dim(data2)
NAthresth <- 0.5
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>NAthreth)
data2 <- data[,!NAcols]
NAthresh <- 0.5
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
data2 <- data[,!NAcols]
dim(data2)
data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
NAthresh <- 0.5
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
data2 <- data[,!NAcols]
dim(data2)
?nzv
?nearZeroVar
a <- nearZeroVar(data2)
library(caret)
a <- nearZeroVar(data2)
head(a)
NAthresh <- 0.2
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
data2 <- data[,!NAcols]
dim(data2)
a <- nearZeroVar(data2)
dim(data2[,!a])
dim(a)
a
length(a)
93-34
data3 <- data2[,!a]
head(data3)
dim(data2)
head(data2)
b <- c(1,2,3,4)
head(data2[,b])
head(data2[,!b])
dim(data2[,-a])
data3 <- data2[,-nearZeroVar(data2)]
dim(data3)
head(data3)
tail(data3)
head(data)
data <- data[,-1:7]
NAthresh <- 0.2
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
data2 <- data[,!NAcols]
data3 <- data2[,-nearZeroVar(data2)]
dim(data3)
data <- data[,-1:7]
data <- data[,1:7]
seq(1:7)
data <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
exclude <- seq(1:7)
data <- data[,-exclude]
NAthresh <- 0.2
NAcols <- apply(data, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
data2 <- data[,!NAcols]
data3 <- data2[,-nearZeroVar(data2)]
dim(data3)
names(data3)
?preProcess
?preProcess
library(caret)
?preProcess
head(training)
dim(training)
library(caret)
dataTrain <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
exclude <- seq(1:7)
dataTrain <- dataTrain[,-exclude]
NAthresh <- 0.2
NAcols <- apply(dataTrain, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
dataTrain <- dataTrain[,!NAcols]
dataTrain <- dataTrain[,-nearZeroVar(dataTrain)]
dim(dataTrain)
trainCorr <- cor(dataTrain)
outcome <- dataTrain$classe
trainCorr <- cor(dataTrain[,-outcome])
head(dataTrain)
trainCorr <- cor(dataTrain[,-53])
highCorr <- findCorrelation(trainCorr, 0.9)
head(highCorr)
highCorr <- findCorrelation(trainCorr, 0.95)
head(highCorr)
names(dataTrain[,highCorr])
trainCtrl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3,
verboseIter = TRUE)
grid <- expand.grid(n.trees=150,
shrinkage=0.1,
n.minobsinnode = 10,
interaction.depth=7)
gbm_mod <- train(classe ~., data = dataTrain, method = "gbm", trControl = trainCtrl)
gbm_mod <- train(classe ~., data = dataTrain, method = "gbm", trControl = trainCtrl, tuneGrid = grid)
gbm_mod
plot(gbm_mod)
varImp(gbm_mod)
?varImp
library(caret)
plot(varImp(gbm_mod))
?relative.influence
relative.influence(gbm_mod)
library(gbm)
plot(varImp(gbm_mod))
vif(gbm_mod)
?vif
head(trainCorr)
dim(dataTrain)
dim(dataTrain)[2]
dataTrain <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
dataTest <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), na.strings = "NA")
#Remove time variables from training predictors
exclude <- seq(1:7)
dataTrain <- dataTrain[,-exclude]
#Remove training variables with more than 80% NA values
NAthresh <- 0.2
NAcols <- apply(dataTrain, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
dataTrain <- dataTrain[,!NAcols]
dataTest <- dataTest[,!NAcols]
#Remove training columns with zero zero variance
dataTrain <- dataTrain[,-nearZeroVar(dataTrain)]
dataTest <- dataTest[,-nearZeroVar(dataTrain)]
#Check for high correlation
trainCorr <- cor(dataTrain[,-dim(dataTrain)[2]])
highCorr <- findCorrelation(trainCorr, 0.9)
dataTrain <- dataTrain[,-highCorr]
dataTest <- dataTest[,-highCorr]
#Train model using rf and GBM, set training parameters
trainCtrl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3,
verboseIter = TRUE)
rf_mod <- train(classe ~., data = dataTrain, method = "rf", trControl = trainCtrl)
grid <- expand.grid(n.trees=150,
shrinkage=0.1,
n.minobsinnode = 10,
interaction.depth=7)
gbm_mod <- train(classe ~., data = dataTrain, method = "gbm", trControl = trainCtrl, tuneGrid = grid)
size(gbm_mod)
object.size(gbm_mod)
plot(varImp(gbm_mod))
head(varImp(gbm_mod))
order(varImp(gbm_mod))
order(varImp(gbm_mod)$importance)
rank(varImp(gbm_mod)$importance)
a <- varImp(gbm_mod)
order(a$importance)
?order
?rank
rank(a, "overall")
rank(a)
rank(a$importance)
names(a$importance)
rank(a$importance, "Overall")
order(a$importance, "Overall")
order(a$importance, 2)
rank(a$importance, 2)
a$importance[1]
a$importance[[1]]
a&importance
a$importance
as.data.frame(a$importance)
b <- as.data.frame(a$importance)
b[1]
b[1,1]
order(b, "Overall")
order(b, b$Overall)
c <- order(b, b$Overall)
b[,c]
?sort
sort(b)
sort(b$Overall)
sort(a$importance)
a$importance[[1]]
a$importance[[2]]
a$importance[1
]
rownames(b)
c <- data.frame(param = rownames(b), Overall = b$Overall)
c
sort(c, 2)
sort(c)
order(c)
order(c,2)
rank(c)
dim(c)
c[order(c$Overall),]
c[order(c$Overall, decreasing = TRUE),]
c <- c[order(c$Overall, decreasing = TRUE),]
ggplot(x = dataTrain[,c[[1]]], y = dataTrain[,c[[2]]], aes(color = classe), data = dataTrain)
g <- ggplot(x = dataTrain[,c[[1]]], y = dataTrain[,c[[2]]], aes(color = classe), data = dataTrain)
g + geom_point(color = dataTrain$classe)
g + geom_point()
g <- ggplot(x = dataTrain[,c[[1]]], y = dataTrain[,c[[2]]], data = dataTrain)
g + geom_point(x = dataTrain[,c[[1]]], y = dataTrain[,c[[2]]], aes(color = dataTrain$classe))
qplot(c[[1]], c[[2]], data = dataTrain, color = classe)
c[[1]]
c[1,1]
qplot(c[1,1], c[2,1], data = dataTrain, color = classe)
qplot(dataTrain[,c[1,1]], dataTrain[,c[2,1]], data = dataTrain, color = classe)
gbmPred <- predict(gbm_mod, dataTest)
dim(dataTrain)
dim(dataTest)
dataTest <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), na.strings = "NA")
dataTest <- dataTest[,-exclude]
dataTest <- dataTest[,!NAcols]
dataTrain <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
dataTest <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), na.strings = "NA")
#Remove time variables from training predictors
exclude <- seq(1:7)
dataTrain <- dataTrain[,-exclude]
dataTest <- dataTest[,-exclude]
#Remove training variables with more than 80% NA values
NAthresh <- 0.2
NAcols <- apply(dataTrain, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
dataTrain <- dataTrain[,!NAcols]
dataTest <- dataTest[,!NAcols]
#Remove training columns with zero zero variance
dataTrain <- dataTrain[,-nearZeroVar(dataTrain)]
dataTest <- dataTest[,-nearZeroVar(dataTrain)]
#Check for high correlation
trainCorr <- cor(dataTrain[,-dim(dataTrain)[2]])
highCorr <- findCorrelation(trainCorr, 0.9)
dataTrain <- dataTrain[,-highCorr]
dataTest <- dataTest[,-highCorr]
dim(dataTrain)
dim(dataTest)
dataTrain <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
dataTest <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), na.strings = "NA")
dim(dataTrain)
dim(dataTest)
head(names(dataTrain))
head(names(dataTest))
head(names(dataTest), 7)
head(names(dataTrain), 7)
exclude <- seq(1:7)
dataTrain <- dataTrain[,-exclude]
dataTest <- dataTest[,-exclude]
dim(dataTrain)
dim(dataTest)
NAthresh <- 0.2
NAcols <- apply(dataTrain, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
dataTrain <- dataTrain[,!NAcols]
dim(dataTrain)
dataTest <- dataTest[,!NAcols]
dim(dataTest)
dataTrain <- dataTrain[,-nearZeroVar(dataTrain)]
dim(dataTrain)
dataTest <- dataTest[,-nearZeroVar(dataTrain)]
dim(dataTest)
dataTrain <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
dataTest <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), na.strings = "NA")
#Remove time variables from training predictors
exclude <- seq(1:7)
dataTrain <- dataTrain[,-exclude]
dataTest <- dataTest[,-exclude]
#Remove training variables with more than 80% NA values
NAthresh <- 0.2
NAcols <- apply(dataTrain, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
dataTrain <- dataTrain[,!NAcols]
dataTest <- dataTest[,!NAcols]
#Remove training columns with zero zero variance
nzv <- nearZeroVar(dataTrain)
dataTrain <- dataTrain[,-nzv]
dataTest <- dataTest[,-nzv]
dim(dataTest)
#Check for high correlation
trainCorr <- cor(dataTrain[,-dim(dataTrain)[2]])
highCorr <- findCorrelation(trainCorr, 0.9)
dataTrain <- dataTrain[,-highCorr]
dataTest <- dataTest[,-highCorr]
dim(dataTrain)
dim(dataTest)
gbmPred <- predict(gbm_mod, dataTest)
confusionMatrix(gbmPred, dataTest$classe)
gbmPred <- predict(gbm_mod$finalModel, dataTest)
?predict
gbmPred <- predict(gbm_mod, dataTest)
names(dataTest)
dataTest$problem_id
names(dataTrain)
sum(names(dataTrain) != names(dataTest))
gbmPred
library(caret)
dataTrain <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings = "NA")
dataTest <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"), na.strings = "NA")
#Remove time variables from training predictors
exclude <- seq(1:7)
dataTrain <- dataTrain[,-exclude]
dataTest <- dataTest[,-exclude]
#Remove training variables with more than 80% NA values
NAthresh <- 0.2
NAcols <- apply(dataTrain, 2, function(x) sum(is.na(x))/length(x)>NAthresh)
dataTrain <- dataTrain[,!NAcols]
dataTest <- dataTest[,!NAcols]
#Remove training columns with zero zero variance
nzv <- nearZeroVar(dataTrain)
dataTrain <- dataTrain[,-nzv]
dataTest <- dataTest[,-nzv]
#Check for high correlation
trainCorr <- cor(dataTrain[,-dim(dataTrain)[2]])
highCorr <- findCorrelation(trainCorr, 0.9)
dataTrain <- dataTrain[,-highCorr]
dataTest <- dataTest[,-highCorr]
#Train model using rf and GBM, set training parameters
inTrain <- createDataPartition(dataTrain$classe, p=0.75)
training <- dataTrain[,inTrain]
testing <- dataTrain[,-inTrain]
inTrain <- createDataPartition(dataTrain$classe, p=0.75, list = FALSE)
training <- dataTrain[,inTrain]
testing <- dataTrain[,-inTrain]
trainCtrl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3,
verboseIter = TRUE)
rf_mod <- train(classe ~., data = training, method = "rf", trControl = trainCtrl)
grid <- expand.grid(n.trees=150,
shrinkage=0.1,
n.minobsinnode = 10,
interaction.depth=7)
gbm_mod <- train(classe ~., data = training, method = "gbm", trControl = trainCtrl, tuneGrid = grid)
dim(training)
dim(dataTrain)
inTrain <- createDataPartition(dataTrain$classe, p=0.75, list = FALSE)
head(inTrain)
training <- dataTrain[,inTrain]
inTrain <- createDataPartition(dataTrain$classe, p=0.75, list = FALSE)
training <- dataTrain[inTrain,]
testing <- dataTrain[-inTrain,]
trainCtrl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3,
verboseIter = TRUE)
rf_mod <- train(classe ~., data = training, method = "rf", trControl = trainCtrl)
grid <- expand.grid(n.trees=150,
shrinkage=0.1,
n.minobsinnode = 10,
interaction.depth=7)
gbm_mod <- train(classe ~., data = training, method = "gbm", trControl = trainCtrl, tuneGrid = grid)
predRF <- predict(rf_mod$finalModel, testing)
predGBM <- predict(gbm_mod$finalModel, testing)
predGBM <- predict(gbm_mod, testing)
confusionMatrix(predRF, testing$classe)
confusionMatrix(predGBM, testing$classe)
plot(rf_mod)
varImp(rf_mod)
varImp(gbm_mod)
library(gbm)
varImp(gbm_mod)
par(mfrow = c(1,2))
plot(varImp(rf_mod))
plot(varImp(gbm_mod))
par(mfrow = c(1,2,2,2))
par(mfrow = c(1,2))
plot(varImp(gbm_mod))
par(mfrow = c(2,1))
plot(varImp(gbm_mod))
plot(varImp(rf_mod))
gbm_mod$finalModel
rf_mod$finalModel
gbm_mod$results
?table
table(dataTrain$classe)
prop.table(dataTrain$classe)
table(dataTrain$classe)/dim(dataTrain,2)
table(dataTrain$classe)/dim(dataTrain)[2]
table(dataTrain$classe)/dim(dataTrain)[1]
predFinal <- predict(rf_mod, dataTest)
predFinal
predFinal[1]
predFinal[2]
predFinal
predFinal[12]
predFinal[13]
predFinal[14]
predFinal[1]
predFinal[15]
predFinal[16]
predFinal[17]
predFinal[18]
predFinal[19]
predFinal[20]
rf_mod
confusionMatrix(predRF, testing$classe)
a <- confusionMatrix(predRF, testing$classe)
a$overall
data.table(model = c("GBM", "Random Forest"), confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall)
data.frame(model = c("GBM", "Random Forest"), confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall)
?matrix
matrix(c(onfusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall),nrow = 2, ncol = 8, byrow = TRUE)
matrix(c(confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall),nrow = 2, ncol = 7, byrow = TRUE)
matrix(c(confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall),nrow = 2, ncol = 7, byrow = TRUE, dimnames = names(confusionMatrix(predRF, testing$classe)$overall))
matrix(c(confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall),nrow = 2, ncol = 7, byrow = TRUE, dimnames = as.list(names(confusionMatrix(predRF, testing$classe)$overall)))
a <- matrix(c(confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall),nrow = 2, ncol = 7, byrow = TRUE)
names(a) <- names(confusionMatrix(predRF, testing$classe)$overall)
a
colnames(a) <- names(confusionMatrix(predRF, testing$classe)$overall)
a
rbind(confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall)
data.frame(model = c("GBM", "Random Forest"), rbind(confusionMatrix(predRF, testing$classe)$overall, confusionMatrix(predGBM, testing$classe)$overall))
predFinal
t(predFinal)
data.frame(case = seq(1:20), prediction = t(predFinal))
data.frame(case = seq(1:20), prediction = predFinal)
?nearZeroVar
setwd("C:/Users/mike.mcgroddy/Desktop/Coursera/Stats with R/Mach Learning/Project 1/Machine-Learning")
